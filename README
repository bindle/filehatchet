
File Hatchet
============

   File Hatchet is a utility for splitting a large file into multiple smaller
   "chip" files for distribution. The chip files use the file format .B2S
   (Big To Small).  Planned features for File Hatchet include the ability to
   verify data integrity of both the "chips" and the restored orignal file;
   the ability to incrementally rebuild the original file from the chips; the
   ability to regenerate any one chip from the original file; and the ability
   to repair the corrupted segments of the orignal file using the chips.


Contents
--------

   1. Disclaimer
   2. Software Requirements
   3. File Format .B2S Version 1
   4. Maintainers
   5. Community
   6. Source Code
   7. Package Maintence Notes


Disclaimer
==========

   This software is provided by the copyright holders and contributors "as
   is" and any express or implied warranties, including, but not limited to,
   the implied warranties of merchantability and fitness for a particular
   purpose are disclaimed. In no event shall Bindle Binaries be liable for
   any direct, indirect, incidental, special, exemplary, or consequential
   damages (including, but not limited to, procurement of substitute goods or
   services; loss of use, data, or profits; or business interruption) however
   caused and on any theory of liability, whether in contract, strict
   liability, or tort (including negligence or otherwise) arising in any way
   out of the use of this software, even if advised of the possibility of
   such damage.


Software Requirements
=====================

   Git 1.7.2.3


File Format .B2S Version 1
==========================

   This is a brief outline/byte map of the .B2S file format.  Please refer
   to the documentation for the .B2S file format for a comprehensive
   explanation of the format.

   Flags     Description
    0x01     Use Unicode strings
    0x02     Content uses LZMA compression

   Offset    Bytes     Description
     0x00        4     Magic ID (0x42325300 == "B2S")
     0x04        4     File Format Version Current (1)
     0x08        4     File Format Version Age (0)
     0x0C        8     Header Length
     0x14        8     Flags (Boolean Options)
     0x1C       20     Orig File SHA1 Hash
     0x30        8     Orig File Size
     0x38        8     Orig File: Number of Parts
     0x40        8     Orig File: Length of File Name (VAL: X)
     0x48        8     Orig File: Chip size
     0x50        8     Orig FIle: SHA1 Digest Check Chunk Size
     0x58        8     Content: Index Number
     0x60        8     Content: Offset from beginning of original
     0x68        8     Content: Length (VAL: Y)
     0x70        8     Content: Length of Array of Offsets/SHA1 Digest (VAL: Z)
     0x78        8     Content: Offset in file for file SHA1
     0x80        *     Orignal File Name
        *        *     Content
        *        *     Array of Content Chunk Offsets from Original/SHA1 Digest
        *       20     SHA1 Digest of this file

   Chip with content index of zero is used as an index file and will not
   contain content from the original file, but can be used to regenerate a
   specific chip from the original file, to generate a custom chip from the
   original file, to validate the recreated original file, and to identify
   corrupt segments of the original file.


Maintainers
===========

   David M. Syzdek
   Bindle Binaries
   syzdek@bindlebinaries.com


Source Code
===========

   The source code for this project is maintained using git
   (http://git-scm.com).  The following contains information to checkout the
   source code from the git repository.

   Git URLs:
      git://github.com/bindle/filehatchet.git
      git://git.scm.bindlebinaries.com/pub/scm/com.bindlebinaries/filehatchet.git
      http://http.scm.bindlebinaries.com/pub/scm/com.bindlebinaries/filehatchet.git
      ssh://ssh.scm.bindlebinaries.com/pub/scm/com.bindlebinaries/filehatchet.git

   Downloading Source:

      $ git clone git://github.com/bindle/filehatchet.git

   Preparing Source:

      $ cd filehatchet
      $ autoreconf -i -f -I m4

   Git Branches:
      master - Current release of packages.
      next   - changes staged for next release
      pu     - proposed updates for next release
      xx/yy+ - branch for testing new changes before merging to 'pu' branch


Package Maintence Notes
=======================

   This is a collection of notes for developers to use when maintaining this
   package.

   New Release Checklist:

      - Switch to 'master' branch in Git repository.
      - Update version in configure.ac.
      - Update date and version in ChangeLog.
      - Commit configure.ac and ChangeLog changes to repository.
      - Create tag in git repository:
           $ git tag -s v${MAJOR}.${MINOR}
      - Push repository to publishing server:
           $ git push --tags origin master:master next:next pu:pu

   Creating Source Distribution Archives:

      $ ./configure
      $ make autoreconf
      $ make distcheck
      $ make dist-bzip2
